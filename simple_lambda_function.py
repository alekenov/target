#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è AWS Lambda —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ç—Ä–∞—Ç –∏–∑ Facebook –∞–∫–∫–∞—É–Ω—Ç–∞
–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram.
"""

import os
import logging
from datetime import datetime
import asyncio
import traceback
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from facebook_business.api import FacebookAdsApi
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.exceptions import FacebookRequestError
from telegram import Bot

class FacebookAuth:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Facebook Marketing API."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        self.app_id = os.getenv('FB_APP_ID')
        self.app_secret = os.getenv('FB_APP_SECRET', '')
        self.access_token = os.getenv('FB_ACCESS_TOKEN')
        self.account_id = os.getenv('FB_ACCOUNT_ID')
        
        if not self.app_id or not self.access_token or not self.account_id:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã FB_APP_ID, FB_ACCESS_TOKEN –∏–ª–∏ FB_ACCOUNT_ID")
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    def initialize(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Facebook API.
        
        Returns:
            tuple: (AdAccount, FacebookAdsApi) - –æ–±—ä–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ API
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
            api = FacebookAdsApi.init(
                app_id=self.app_id,
                app_secret=self.app_secret,
                access_token=self.access_token
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            account = AdAccount(f'act_{self.account_id}')
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Facebook API –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account_id}")
            return account, api
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Facebook API: {str(e)}")
            return None, None

def get_campaign_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–∞–º–ø–∞–Ω–∏—è–º."""
    today = datetime.now().strftime('%Y-%m-%d')
    
    auth = FacebookAuth()
    account, api = auth.initialize()
    
    if not account or not api:
        raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Facebook API")
    
    params = {
        'time_range': {'since': today, 'until': today},
        'level': 'campaign',
        'fields': [
            'campaign_name',
            'objective',
            'spend',
            'impressions',
            'clicks',
            'ctr',
            'cpc',
            'actions',
            'cost_per_action_type',
            'website_ctr',
            'website_purchase_roas'
        ]
    }
    
    insights = account.get_insights(params=params)
    campaigns_data = list(insights)
    
    return campaigns_data

def format_telegram_report():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è Telegram."""
    today = datetime.now().strftime('%Y-%m-%d')
    current_time = datetime.now().strftime('%H:%M:%S')
    campaigns = get_campaign_stats()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
    total_spend = 0
    total_conversations = 0
    total_website_clicks = 0
    active_campaigns = 0
    
    report_text = f"""üìä *–û—Ç—á–µ—Ç –æ —Ç—Ä–∞—Ç–∞—Ö –Ω–∞ —Ä–µ–∫–ª–∞–º—É Facebook*
üìÖ –î–∞—Ç–∞: {today}
‚è∞ –í—Ä–µ–º—è: {current_time}
üÜî –ê–∫–∫–∞—É–Ω—Ç: act\_4795321857166878

"""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
    for i, campaign in enumerate(campaigns, 1):
        name = campaign.get('campaign_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').replace('.', '\\.').replace('-', '\\-')
        objective = campaign.get('objective', '').lower()
        spend = float(campaign.get('spend', 0))
        impressions = int(campaign.get('impressions', 0))
        clicks = int(campaign.get('clicks', 0))
        ctr = float(campaign.get('ctr', 0))  # CTR —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç Facebook
        cpc = float(campaign.get('cpc', 0))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–ø–∏—Å–∫–∞—Ö
        conversations = 0
        cost_per_conversation = 0
        website_clicks = 0
        cost_per_website_click = 0
        
        actions = campaign.get('actions', [])
        for action in actions:
            action_type = action.get('action_type', '')
            if action_type == 'onsite_conversion.messaging_conversation_started_7d':
                conversations += int(action.get('value', 0))
            elif action_type == 'link_click':
                website_clicks += int(action.get('value', 0))
        
        cost_per_action = campaign.get('cost_per_action_type', [])
        for cost in cost_per_action:
            action_type = cost.get('action_type', '')
            if action_type == 'onsite_conversion.messaging_conversation_started_7d':
                cost_per_conversation = float(cost.get('value', 0))
            elif action_type == 'link_click':
                cost_per_website_click = float(cost.get('value', 0))
        
        if spend > 0:
            active_campaigns += 1
            total_spend += spend
            total_conversations += conversations
            total_website_clicks += website_clicks
            
            report_text += f"""*{i}\\. {name}*
üí∞ –†–∞—Å—Ö–æ–¥: {spend:.2f} USD
üëÅ –ü–æ–∫–∞–∑—ã: {impressions:,}
üñ± –ö–ª–∏–∫–∏: {clicks:,}
üìà CTR: {ctr:.2f}%
üíµ CPC: {cpc:.2f} USD
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
            if 'messages' in objective or name.lower().startswith('—à–∏—Ä–æ–∫–∞—è'):
                report_text += f"""üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∏: {conversations}
üìä –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: {cost_per_conversation:.2f} USD

"""
            else:  # –¥–ª—è —Ü–µ–ª–µ–π –Ω–∞ —Å–∞–π—Ç
                report_text += f"""üåê –ö–ª–∏–∫–∏ –Ω–∞ —Å–∞–π—Ç: {website_clicks}
üìä –¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ –Ω–∞ —Å–∞–π—Ç: {cost_per_website_click:.2f} USD

"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    avg_cost_per_conversation = total_spend / total_conversations if total_conversations > 0 else 0
    avg_cost_per_website_click = total_spend / total_website_clicks if total_website_clicks > 0 else 0
    
    report_text += f"""*–ò–¢–û–ì–û:*
üí∞ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_spend:.2f} USD
"""

    if total_conversations > 0:
        report_text += f"""üí¨ –í—Å–µ–≥–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: {total_conversations}
üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: {avg_cost_per_conversation:.2f} USD
"""

    if total_website_clicks > 0:
        report_text += f"""üåê –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç: {total_website_clicks}
üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ –Ω–∞ —Å–∞–π—Ç: {avg_cost_per_website_click:.2f} USD
"""

    report_text += f"""üìã –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {active_campaigns}"""
    
    return report_text

async def send_to_telegram(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª.
    
    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID")
            return False
        
        bot = Bot(token=bot_token)
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='MarkdownV2'
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (chat_id: {chat_id})")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await bot.send_message(
                chat_id=chat_id,
                text=message.replace('*', '').replace('_', ''),
                parse_mode=None
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
            return True
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        return False

async def main_async():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–∞—Ç–∞—Ö.
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        message = format_telegram_report()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
        success = await send_to_telegram(message)
        
        if success:
            logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
        logger.error(traceback.format_exc())

def lambda_handler(event, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AWS Lambda.
    
    Args:
        event (dict): –°–æ–±—ã—Ç–∏–µ Lambda
        context (object): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Lambda
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main_async())
        
        return {
            'statusCode': 200,
            'body': '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram'
        }
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}\n{traceback.format_exc()}"
        logger.error(error_msg)
        
        return {
            'statusCode': 500,
            'body': error_msg
        }

if __name__ == "__main__":
    asyncio.run(main_async())
