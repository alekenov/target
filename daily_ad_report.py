#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö Facebook.
–û—Ç—á–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∏ –ø–æ–∫–∞–∑–∞—Ö –ø–æ –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å.
"""

import os
import sys
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
import json
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from facebook_ads_toolkit.auth.facebook_auth import init_facebook_api, get_api, get_ad_account
from facebook_ads_toolkit.reports.ad_data_fetcher import AdDataFetcher
from facebook_business.adobjects.adaccount import AdAccount

def get_daily_ad_report():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∏ –ø–æ–∫–∞–∑–∞—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å.
    
    Returns:
        dict: –û—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    today = datetime.now().strftime('%Y-%m-%d')
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Facebook API
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Facebook API")
    account, api = init_facebook_api()
    if not account or not api:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Facebook API")
        raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Facebook API")
    
    logger.info(f"Facebook API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê–∫–∫–∞—É–Ω—Ç: {account.get_id()}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
    account_obj = get_ad_account()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    data_fetcher = AdDataFetcher(account_obj)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")
    campaigns_params = {
        'fields': ['id', 'name', 'status', 'effective_status', 'daily_budget', 'lifetime_budget'],
        'filtering': [
            {
                'field': 'effective_status',
                'operator': 'IN',
                'value': ['ACTIVE', 'PAUSED']
            }
        ]
    }
    
    campaigns = data_fetcher.fetch_campaigns(params=campaigns_params)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(campaigns)} –∫–∞–º–ø–∞–Ω–∏–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫–∞–∑–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –¥–µ–Ω—å
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫–∞–∑–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {yesterday} - {today}")
    
    campaign_insights = []
    for campaign in campaigns:
        campaign_id = campaign['id']
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign['name']} (ID: {campaign_id})")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
            insights = data_fetcher.get_campaign_insights(
                campaign_id=campaign_id,
                start_date=yesterday,
                end_date=today
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–∞–º–ø–∞–Ω–∏–∏ –∫ –∏–Ω—Å–∞–π—Ç–∞–º
            insights['campaign_name'] = campaign['name']
            insights['campaign_id'] = campaign_id
            insights['status'] = campaign['effective_status']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç
            if 'daily_budget' in campaign and campaign['daily_budget']:
                insights['budget'] = f"{float(campaign['daily_budget'])/100:.2f} USD/–¥–µ–Ω—å"
            elif 'lifetime_budget' in campaign and campaign['lifetime_budget']:
                insights['budget'] = f"{float(campaign['lifetime_budget'])/100:.2f} USD (–Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥)"
            else:
                insights['budget'] = "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
            if insights and 'spend' in insights and float(insights.get('spend', 0)) > 0:
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
                adsets_params = {
                    'fields': ['id', 'name', 'status', 'effective_status'],
                    'filtering': [
                        {
                            'field': 'campaign.id',
                            'operator': 'EQUAL',
                            'value': campaign_id
                        }
                    ]
                }
                adsets = data_fetcher.fetch_adsets(params=adsets_params)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                ads_list = []
                for adset in adsets:
                    adset_id = adset['id']
                    ads_params = {
                        'fields': ['id', 'name', 'status', 'effective_status'],
                        'filtering': [
                            {
                                'field': 'adset.id',
                                'operator': 'EQUAL',
                                'value': adset_id
                            }
                        ]
                    }
                    ads = data_fetcher.fetch_ads(params=ads_params)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    for ad in ads:
                        ad_id = ad['id']
                        try:
                            ad_insights = data_fetcher.fetch_insights(
                                entity_ids=[ad_id],
                                entity_type='ad',
                                start_date=yesterday,
                                end_date=today
                            )
                            
                            if ad_insights and len(ad_insights) > 0:
                                ad_data = {
                                    'id': ad_id,
                                    'name': ad['name'],
                                    'status': ad['effective_status'],
                                    'adset_id': adset_id,
                                    'adset_name': adset['name']
                                }
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∏–Ω—Å–∞–π—Ç–æ–≤
                                for key in ['impressions', 'clicks', 'spend', 'ctr', 'cpc']:
                                    if key in ad_insights[0]:
                                        ad_data[key] = ad_insights[0][key]
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
                                if 'spend' in ad_data and float(ad_data.get('spend', 0)) > 0:
                                    ads_list.append(ad_data)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_id}: {str(e)}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫ –∏–Ω—Å–∞–π—Ç–∞–º –∫–∞–º–ø–∞–Ω–∏–∏
                insights['ads'] = ads_list
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–µ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
                campaign_insights.append(insights)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {str(e)}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = {
        'date': today,
        'account_id': account_obj.get_id_assured(),
        'total_campaigns': len(campaigns),
        'campaigns_with_data': len(campaign_insights),
        'campaigns': campaign_insights
    }
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total_spend = sum(float(c.get('spend', 0)) for c in campaign_insights if 'spend' in c)
    total_impressions = sum(int(c.get('impressions', 0)) for c in campaign_insights if 'impressions' in c)
    
    report['total_spend'] = f"{total_spend:.2f} USD"
    report['total_impressions'] = total_impressions
    
    return report

def format_report(report, max_campaigns=10):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
    
    Args:
        report (dict): –û—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
        max_campaigns (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    """
    output = f"üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ü–û –†–ï–ö–õ–ê–ú–ù–´–ú –ö–ê–ú–ü–ê–ù–ò–Ø–ú FACEBOOK\n"
    output += f"–î–∞—Ç–∞: {report['date']}\n"
    output += f"–ê–∫–∫–∞—É–Ω—Ç: {report['account_id']}\n\n"
    
    output += f"–û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
    output += f"–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {report['total_campaigns']}\n"
    output += f"–ö–∞–º–ø–∞–Ω–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏: {report['campaigns_with_data']}\n"
    output += f"–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {report['total_spend']}\n"
    output += f"–û–±—â–∏–µ –ø–æ–∫–∞–∑—ã: {report['total_impressions']}\n\n"
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞–º–ø–∞–Ω–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
    campaigns_with_data = [c for c in report['campaigns'] if 'spend' in c and float(c.get('spend', 0)) > 0]
    
    output += f"–ö–ê–ú–ü–ê–ù–ò–ò –° –†–ê–°–•–û–î–ê–ú–ò ({len(campaigns_with_data)} –∏–∑ {report['total_campaigns']}):\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_campaigns = sorted(
        campaigns_with_data, 
        key=lambda x: float(x.get('spend', 0)) if 'spend' in x else 0, 
        reverse=True
    )
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
    campaigns_to_show = sorted_campaigns[:max_campaigns]
    
    for i, campaign in enumerate(campaigns_to_show, 1):
        output += f"{i}. {campaign['campaign_name']} (ID: {campaign['campaign_id']})\n"
        output += f"   –°—Ç–∞—Ç—É—Å: {campaign['status']}\n"
        output += f"   –ë—é–¥–∂–µ—Ç: {campaign['budget']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∏ –ø–æ–∫–∞–∑–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'spend' in campaign:
            output += f"   –†–∞—Å—Ö–æ–¥—ã: {campaign['spend']} USD\n"
        else:
            output += f"   –†–∞—Å—Ö–æ–¥—ã: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
        if 'impressions' in campaign:
            output += f"   –ü–æ–∫–∞–∑—ã: {campaign['impressions']}\n"
        else:
            output += f"   –ü–æ–∫–∞–∑—ã: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'clicks' in campaign:
            output += f"   –ö–ª–∏–∫–∏: {campaign['clicks']}\n"
            
        if 'ctr' in campaign:
            output += f"   CTR: {campaign['ctr']}%\n"
            
        if 'cpc' in campaign:
            output += f"   CPC: {campaign['cpc']} USD\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
        if 'ads' in campaign and campaign['ads']:
            output += f"\n   üì± –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ({len(campaign['ads'])}):\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
            sorted_ads = sorted(
                campaign['ads'],
                key=lambda x: float(x.get('spend', 0)) if 'spend' in x else 0,
                reverse=True
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
            max_ads = 5
            ads_to_show = sorted_ads[:max_ads]
            
            for j, ad in enumerate(ads_to_show, 1):
                output += f"      {j}. {ad['name']} (ID: {ad['id']})\n"
                output += f"         –ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {ad['adset_name']}\n"
                output += f"         –°—Ç–∞—Ç—É—Å: {ad['status']}\n"
                
                if 'spend' in ad:
                    output += f"         –†–∞—Å—Ö–æ–¥—ã: {ad['spend']} USD\n"
                
                if 'impressions' in ad:
                    output += f"         –ü–æ–∫–∞–∑—ã: {ad['impressions']}\n"
                
                if 'clicks' in ad:
                    output += f"         –ö–ª–∏–∫–∏: {ad['clicks']}\n"
                
                if 'ctr' in ad:
                    output += f"         CTR: {ad['ctr']}%\n"
                
                if 'cpc' in ad:
                    output += f"         CPC: {ad['cpc']} USD\n"
                
                output += "\n"
            
            if len(sorted_ads) > max_ads:
                output += f"      ... –∏ –µ—â–µ {len(sorted_ads) - max_ads} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            
        output += "\n"
    
    if len(sorted_campaigns) > max_campaigns:
        output += f"... –∏ –µ—â–µ {len(sorted_campaigns) - max_campaigns} –∫–∞–º–ø–∞–Ω–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏\n\n"
    
    output += f"–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: reports/fb_ads_report_{report['date']}.json\n"
    
    return output

def format_telegram_report(report, max_campaigns=5):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    
    Args:
        report (dict): –û—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
        max_campaigns (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è Telegram
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram
    output = f"<b>üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ü–û –†–ï–ö–õ–ê–ú–ù–´–ú –ö–ê–ú–ü–ê–ù–ò–Ø–ú FACEBOOK</b>\n"
    output += f"<b>–î–∞—Ç–∞:</b> {report['date']}\n"
    output += f"<b>–ê–∫–∫–∞—É–Ω—Ç:</b> {report['account_id']}\n\n"
    
    output += f"<b>–û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:</b>\n"
    output += f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: <b>{report['total_campaigns']}</b>\n"
    output += f"‚Ä¢ –ö–∞–º–ø–∞–Ω–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏: <b>{report['campaigns_with_data']}</b>\n"
    output += f"‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: <b>{report['total_spend']}</b>\n"
    output += f"‚Ä¢ –û–±—â–∏–µ –ø–æ–∫–∞–∑—ã: <b>{report['total_impressions']}</b>\n\n"
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞–º–ø–∞–Ω–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
    campaigns_with_data = [c for c in report['campaigns'] if 'spend' in c and float(c.get('spend', 0)) > 0]
    
    output += f"<b>–¢–û–ü –ö–ê–ú–ü–ê–ù–ò–ô –ü–û –†–ê–°–•–û–î–ê–ú:</b>\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_campaigns = sorted(
        campaigns_with_data, 
        key=lambda x: float(x.get('spend', 0)) if 'spend' in x else 0, 
        reverse=True
    )
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
    campaigns_to_show = sorted_campaigns[:max_campaigns]
    
    for i, campaign in enumerate(campaigns_to_show, 1):
        output += f"{i}. <b>{campaign['campaign_name']}</b>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∏ –ø–æ–∫–∞–∑–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'spend' in campaign:
            output += f"   üí∞ –†–∞—Å—Ö–æ–¥—ã: <b>{campaign['spend']} USD</b>\n"
        
        if 'impressions' in campaign:
            output += f"   üëÅ –ü–æ–∫–∞–∑—ã: <b>{campaign['impressions']}</b>\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'clicks' in campaign and 'ctr' in campaign:
            output += f"   üñ± –ö–ª–∏–∫–∏: <b>{campaign['clicks']}</b> (CTR: <b>{campaign['ctr']}%</b>)\n"
            
        if 'cpc' in campaign:
            output += f"   üíµ CPC: <b>{campaign['cpc']} USD</b>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø-3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
        if 'ads' in campaign and campaign['ads']:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
            sorted_ads = sorted(
                campaign['ads'],
                key=lambda x: float(x.get('spend', 0)) if 'spend' in x else 0,
                reverse=True
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ Telegram
            max_ads = 3
            ads_to_show = sorted_ads[:max_ads]
            
            output += f"\n   <b>üì± –¢–æ–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n"
            
            for j, ad in enumerate(ads_to_show, 1):
                output += f"   {j}. <i>{ad['name']}</i>\n"
                
                if 'spend' in ad:
                    output += f"      üí∞ –†–∞—Å—Ö–æ–¥—ã: <b>{ad['spend']} USD</b>\n"
                
                if 'impressions' in ad and 'clicks' in ad:
                    output += f"      üëÅ –ü–æ–∫–∞–∑—ã: <b>{ad['impressions']}</b> | üñ± –ö–ª–∏–∫–∏: <b>{ad['clicks']}</b>\n"
                
                if 'ctr' in ad and 'cpc' in ad:
                    output += f"      üìä CTR: <b>{ad['ctr']}%</b> | üíµ CPC: <b>{ad['cpc']} USD</b>\n"
            
            if len(sorted_ads) > max_ads:
                output += f"   ... –∏ –µ—â–µ {len(sorted_ads) - max_ads} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            
        output += "\n"
    
    return output

def save_report_to_file(report, filename=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ JSON-—Ñ–∞–π–ª.
    
    Args:
        report (dict): –û—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
        filename (str, optional): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    if filename is None:
        date_str = datetime.now().strftime('%Y-%m-%d')
        filename = f"fb_ads_report_{date_str}.json"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é reports, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    reports_dir = "reports"
    if not os.path.exists(reports_dir):
        os.makedirs(reports_dir)
    
    filepath = os.path.join(reports_dir, filename)
    
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=4)
    
    logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filepath}")
    return filepath

def send_telegram_message(message, chat_id=None, bot_token=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç.
    
    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id (str, optional): ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
        bot_token (str, optional): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
    if not bot_token:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not chat_id:
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID")
        return False
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, data=data)
        response_json = response.json()
        
        if response.status_code == 200 and response_json.get('ok'):
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (chat_id: {chat_id})")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {response_json}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        return False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        report = get_daily_ad_report()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        formatted_report = format_report(report)
        print(formatted_report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = save_report_to_file(report)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è Telegram
        telegram_report = format_telegram_report(report)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
        sent = send_telegram_message(telegram_report)
        if sent:
            logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main() 