#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö Facebook –≤ Telegram.
"""

import os
import logging
import asyncio
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from io import BytesIO
from pathlib import Path
from typing import Dict, List, Any, Optional, Union

from telegram import Bot
from telegram.error import TelegramError

from facebook_ads_toolkit.telegram_integration.config import (
    TELEGRAM_BOT_TOKEN,
    TELEGRAM_LOG_CHANNEL_ID,
    MESSAGE_TEMPLATES,
    REPORT_SETTINGS
)
from facebook_ads_toolkit.reports.report_generator import get_campaign_data, get_campaigns_list

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class ReportSender:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram.
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ—Ç—á–µ—Ç–æ–≤.
        """
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram")
    
    def _format_report(self, template_name: str, data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É.
        
        Args:
            template_name (str): –ò–º—è —à–∞–±–ª–æ–Ω–∞.
            data (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω.
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞.
        """
        template = MESSAGE_TEMPLATES.get(template_name, '')
        
        if not template:
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
            return self._create_basic_report(data)
        
        try:
            return template.format(**data)
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}")
            return self._create_basic_report(data)
    
    def _create_basic_report(self, data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –±–µ–∑ —à–∞–±–ª–æ–Ω–∞.
        
        Args:
            data (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.
            
        Returns:
            str: –¢–µ–∫—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
        """
        report = f"üìä *–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∫–ª–∞–º–µ Facebook*\nüìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for key, value in data.items():
            if isinstance(value, (int, float, str)):
                report += f"*{key}*: {value}\n"
        
        return report
    
    def _generate_chart(self, data: List[Dict[str, Any]], 
                        metric: str = 'ctr', 
                        title: str = '–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π') -> Optional[BytesIO]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            data (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏.
            metric (str): –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (ctr, cpc, conversions).
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞.
            
        Returns:
            BytesIO: –û–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        if not data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            df = pd.DataFrame(data)
            
            if 'date' not in df.columns or metric not in df.columns:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: date –∏–ª–∏ {metric}")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            df['date'] = pd.to_datetime(df['date'])
            df = df.sort_values('date')
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            plt.figure(figsize=(10, 6))
            plt.plot(df['date'], df[metric], marker='o', linestyle='-', linewidth=2)
            plt.title(title)
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel(metric.upper())
            plt.grid(True)
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
            buf = BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            plt.close()
            
            return buf
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None
    
    def _format_campaign_list(self, campaigns: List[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        
        Args:
            campaigns (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö.
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–º–ø–∞–Ω–∏–π.
        """
        if not campaigns:
            return "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        result = ""
        for i, campaign in enumerate(campaigns, 1):
            status_emoji = "üü¢" if campaign.get('status') == 'ACTIVE' else "üî¥"
            result += (
                f"{i}. {status_emoji} *{campaign.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}*\n"
                f"   ID: `{campaign.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID')}`\n"
                f"   –ë—é–¥–∂–µ—Ç: ${campaign.get('budget', 0):.2f}\n"
                f"   –°—Ç–∞—Ç—É—Å: {campaign.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            )
        
        return result
    
    async def send_message(self, chat_id: Union[str, int], text: str, parse_mode: str = 'Markdown') -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
        
        Args:
            chat_id (str|int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            parse_mode (str, optional): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'Markdown'.
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode
            )
            return True
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_photo(self, chat_id: Union[str, int], 
                         photo_path: Union[str, BytesIO], 
                         caption: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
        
        Args:
            chat_id (str|int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
            photo_path (str|BytesIO): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –æ–±—ä–µ–∫—Ç BytesIO —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
            caption (str, optional): –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        try:
            await self.bot.send_photo(
                chat_id=chat_id,
                photo=photo_path,
                caption=caption,
                parse_mode='Markdown' if caption else None
            )
            return True
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False
    
    async def send_document(self, chat_id: Union[str, int], 
                           document_path: Union[str, BytesIO], 
                           caption: Optional[str] = None,
                           filename: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram.
        
        Args:
            chat_id (str|int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
            document_path (str|BytesIO): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –æ–±—ä–µ–∫—Ç BytesIO —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.
            caption (str, optional): –ü–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É.
            filename (str, optional): –ò–º—è —Ñ–∞–π–ª–∞.
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        try:
            await self.bot.send_document(
                chat_id=chat_id,
                document=document_path,
                caption=caption,
                filename=filename,
                parse_mode='Markdown' if caption else None
            )
            return True
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return False
    
    async def send_campaign_list(self, chat_id: Union[str, int]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.
        
        Args:
            chat_id (str|int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π
            campaigns = get_campaigns_list(status='ACTIVE')
            
            if not campaigns:
                await self.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                return True
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            data = {
                'date': datetime.now().strftime('%d.%m.%Y'),
                'campaigns_list': self._format_campaign_list(campaigns)
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_report('campaign_list', data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.send_message(chat_id=chat_id, text=message)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
            await self.send_message(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return False
    
    async def send_daily_report(self, chat_id: Union[str, int]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–π.
        
        Args:
            chat_id (Union[str, int]): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞.
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            yesterday = datetime.now() - timedelta(days=1)
            date_range = f"{yesterday.strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
            campaigns = get_campaign_data(
                campaign_id=None,
                days=1,
                status='ACTIVE',
                date_preset='yesterday',
                fields=['impressions', 'clicks', 'spend', 'conversions']
            )
            
            if not campaigns:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
                await self.send_message(
                    chat_id=chat_id,
                    text=MESSAGE_TEMPLATES.get('report.daily.no_campaigns', '–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º.')
                )
                return True
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            total_impressions = sum(c.get('metrics', {}).get('impressions', 0) for c in campaigns)
            total_clicks = sum(c.get('metrics', {}).get('clicks', 0) for c in campaigns)
            total_spend = sum(c.get('metrics', {}).get('spend', 0) for c in campaigns)
            total_conversions = sum(c.get('metrics', {}).get('conversions', 0) for c in campaigns)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            ctr = (total_clicks / total_impressions * 100) if total_impressions > 0 else 0
            cpc = total_spend / total_clicks if total_clicks > 0 else 0
            cost_per_conversion = total_spend / total_conversions if total_conversions > 0 else 0
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ CTR –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö
            for campaign in campaigns:
                metrics = campaign.get('metrics', {})
                impressions = metrics.get('impressions', 0)
                clicks = metrics.get('clicks', 0)
                campaign['ctr'] = (clicks / impressions * 100) if impressions > 0 else 0
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ CTR (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
            sorted_campaigns = sorted(campaigns, key=lambda x: x.get('ctr', 0), reverse=True)
            top_campaigns = sorted_campaigns[:3]  # –ë–µ—Ä–µ–º —Ç–æ–ø-3 –∫–∞–º–ø–∞–Ω–∏–∏
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            header = MESSAGE_TEMPLATES.get('report.daily.header', '').format(
                date_range=date_range,
                impressions=total_impressions,
                clicks=total_clicks,
                ctr=ctr,
                cpc=cpc,
                total_spend=total_spend,
                conversions=total_conversions,
                cost_per_conversion=cost_per_conversion
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π
            campaigns_text = ""
            for i, campaign in enumerate(top_campaigns, 1):
                metrics = campaign.get('metrics', {})
                campaign_text = MESSAGE_TEMPLATES.get('report.daily.campaign_item', '').format(
                    index=i,
                    name=campaign.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏'),
                    impressions=metrics.get('impressions', 0),
                    clicks=metrics.get('clicks', 0),
                    ctr=campaign.get('ctr', 0),
                    spend=metrics.get('spend', 0)
                )
                campaigns_text += campaign_text + "\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            recommendations_header = MESSAGE_TEMPLATES.get('report.daily.recommendations.header', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if cpc > 2.0:  # –í—ã—Å–æ–∫–∏–π CPC
                recommendations.append(MESSAGE_TEMPLATES.get('report.daily.recommendations.high_cpc', '').format(cpc=cpc))
            
            if ctr < 1.0:  # –ù–∏–∑–∫–∏–π CTR
                recommendations.append(MESSAGE_TEMPLATES.get('report.daily.recommendations.low_ctr', '').format(ctr=ctr))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç—ã –∫–∞–º–ø–∞–Ω–∏–π
            for campaign in campaigns:
                budget = campaign.get('budget', 0)
                spend = campaign.get('metrics', {}).get('spend', 0)
                remaining_budget = budget - spend
                
                if remaining_budget < budget * 0.2:  # –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 20% –±—é–¥–∂–µ—Ç–∞
                    recommendations.append(
                        MESSAGE_TEMPLATES.get('report.daily.recommendations.budget_limit', '').format(
                            remaining_budget=remaining_budget
                        )
                    )
                    break  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ
            
            if not recommendations and ctr > 2.0:  # –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                recommendations.append(MESSAGE_TEMPLATES.get('report.daily.recommendations.good_performance', ''))
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç
            recommendations_text = ""
            if recommendations:
                recommendations_text = recommendations_header + "\n".join(recommendations)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            report_text = header + "\n" + campaigns_text + recommendations_text
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            return await self.send_message(chat_id=chat_id, text=report_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await self.send_message(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return False
    
    def _generate_recommendations(self, ctr: float, cpc: float, 
                                 cost_per_conversion: float, 
                                 campaigns: List[Dict[str, Any]]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫.
        
        Args:
            ctr (float): –û–±—â–∏–π CTR.
            cpc (float): –û–±—â–∏–π CPC.
            cost_per_conversion (float): –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏.
            campaigns (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö.
            
        Returns:
            str: –¢–µ–∫—Å—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        """
        recommendations = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CTR
        if ctr < 1.0:
            recommendations.append("‚Ä¢ –ù–∏–∑–∫–∏–π CTR. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CPC
        if cpc > 100:
            recommendations.append("‚Ä¢ –í—ã—Å–æ–∫–∏–π CPC. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        if cost_per_conversion > 1000:
            recommendations.append("‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∏ –±—é–¥–∂–µ—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
        problematic_campaigns = [c for c in campaigns if c.get('ctr', 0) < 0.5 or c.get('cpc', 0) > 100]
        if problematic_campaigns:
            recommendations.append(
                f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ ({len(problematic_campaigns)}). "
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
        if not recommendations:
            recommendations.append("‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.")
        
        return "\n".join(recommendations)
    
    async def send_weekly_report(self, chat_id: Union[str, int]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–π.
        
        Args:
            chat_id (Union[str, int]): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞.
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            week_ago = datetime.now() - timedelta(days=7)
            date_range = f"{week_ago.strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
            campaigns = get_campaign_data(
                campaign_id=None,
                days=7,
                status='ACTIVE',
                date_preset='last_7_days',
                fields=['impressions', 'clicks', 'spend', 'conversions']
            )
            
            if not campaigns:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
                await self.send_message(
                    chat_id=chat_id,
                    text=MESSAGE_TEMPLATES.get('report.weekly.no_campaigns', '–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º.')
                )
                return True
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            total_impressions = sum(c.get('metrics', {}).get('impressions', 0) for c in campaigns)
            total_clicks = sum(c.get('metrics', {}).get('clicks', 0) for c in campaigns)
            total_spend = sum(c.get('metrics', {}).get('spend', 0) for c in campaigns)
            total_conversions = sum(c.get('metrics', {}).get('conversions', 0) for c in campaigns)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            ctr = (total_clicks / total_impressions * 100) if total_impressions > 0 else 0
            cpc = total_spend / total_clicks if total_clicks > 0 else 0
            cost_per_conversion = total_spend / total_conversions if total_conversions > 0 else 0
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ CTR –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö
            for campaign in campaigns:
                metrics = campaign.get('metrics', {})
                impressions = metrics.get('impressions', 0)
                clicks = metrics.get('clicks', 0)
                campaign['ctr'] = (clicks / impressions * 100) if impressions > 0 else 0
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ CTR (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
            sorted_campaigns = sorted(campaigns, key=lambda x: x.get('ctr', 0), reverse=True)
            top_campaigns = sorted_campaigns[:5]  # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –∫–∞–º–ø–∞–Ω–∏–π
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            header = MESSAGE_TEMPLATES.get('report.weekly.header', '').format(
                date_range=date_range,
                impressions=total_impressions,
                clicks=total_clicks,
                ctr=ctr,
                cpc=cpc,
                total_spend=total_spend,
                conversions=total_conversions,
                cost_per_conversion=cost_per_conversion
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π
            campaigns_text = ""
            for i, campaign in enumerate(top_campaigns, 1):
                metrics = campaign.get('metrics', {})
                campaign_text = MESSAGE_TEMPLATES.get('report.weekly.campaign_item', '').format(
                    index=i,
                    name=campaign.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏'),
                    impressions=metrics.get('impressions', 0),
                    clicks=metrics.get('clicks', 0),
                    ctr=campaign.get('ctr', 0),
                    spend=metrics.get('spend', 0),
                    conversions=metrics.get('conversions', 0)
                )
                campaigns_text += campaign_text + "\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            recommendations_header = MESSAGE_TEMPLATES.get('report.weekly.recommendations.header', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if cpc > 2.0:  # –í—ã—Å–æ–∫–∏–π CPC
                recommendations.append(MESSAGE_TEMPLATES.get('report.weekly.recommendations.high_cpc', '').format(cpc=cpc))
            
            if ctr < 1.0:  # –ù–∏–∑–∫–∏–π CTR
                recommendations.append(MESSAGE_TEMPLATES.get('report.weekly.recommendations.low_ctr', '').format(ctr=ctr))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            if total_conversions == 0:
                recommendations.append(MESSAGE_TEMPLATES.get('report.weekly.recommendations.no_conversions', ''))
            elif cost_per_conversion > 50:
                recommendations.append(MESSAGE_TEMPLATES.get('report.weekly.recommendations.high_cost_per_conversion', '').format(
                    cost_per_conversion=cost_per_conversion
                ))
            
            if not recommendations and ctr > 2.0 and cost_per_conversion < 30:  # –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                recommendations.append(MESSAGE_TEMPLATES.get('report.weekly.recommendations.good_performance', ''))
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç
            recommendations_text = ""
            if recommendations:
                recommendations_text = recommendations_header + "\n".join(recommendations)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            report_text = header + "\n" + campaigns_text + recommendations_text
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            return await self.send_message(chat_id=chat_id, text=report_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await self.send_message(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return False
    
    async def send_campaign_info(self, chat_id: Union[str, int], campaign_id: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.
        
        Args:
            chat_id (Union[str, int]): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
            campaign_id (str): ID –∫–∞–º–ø–∞–Ω–∏–∏.
            
        Returns:
            bool: True, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∏–Ω–∞—á–µ False.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏–∏
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")
            
            campaign_data = get_campaign_data(campaign_id=campaign_id, days=30)
            
            if not campaign_data:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")
                await self.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏–∏ —Å ID {campaign_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–ø–∞–Ω–∏–∏
            campaign_name = campaign_data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            status = campaign_data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            objective = campaign_data.get('objective', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            budget = campaign_data.get('budget', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = campaign_data.get('metrics', {})
            impressions = metrics.get('impressions', 0)
            clicks = metrics.get('clicks', 0)
            ctr = metrics.get('ctr', 0)
            cpc = metrics.get('cpc', 0)
            spend = metrics.get('spend', 0)
            conversions = metrics.get('conversions', 0)
            cost_per_conversion = metrics.get('cost_per_conversion', 0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = MESSAGE_TEMPLATES.get('campaign_info', '').format(
                campaign_name=campaign_name,
                campaign_id=campaign_id,
                status=status,
                objective=objective,
                budget=budget,
                impressions=impressions,
                clicks=clicks,
                ctr=ctr,
                cpc=cpc,
                spend=spend,
                conversions=conversions,
                cost_per_conversion=cost_per_conversion,
                targeting=campaign_data.get('targeting', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")
            await self.send_message(chat_id=chat_id, text=message)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º, —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ CTR
            daily_stats = campaign_data.get('daily_stats', [])
            if daily_stats:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ CTR –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ CTR
                ctr_chart = self._generate_chart(
                    data=daily_stats,
                    metric='ctr',
                    title=f'–î–∏–Ω–∞–º–∏–∫–∞ CTR –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_name}'
                )
                
                if ctr_chart:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                    await self.send_photo(
                        chat_id=chat_id,
                        photo_path=ctr_chart,
                        caption=f"üìä –î–∏–Ω–∞–º–∏–∫–∞ CTR –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_name} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
                    )
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
                spend_chart = self._generate_chart(
                    data=daily_stats,
                    metric='spend',
                    title=f'–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_name}'
                )
                
                if spend_chart:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                    await self.send_photo(
                        chat_id=chat_id,
                        photo_path=spend_chart,
                        caption=f"üí∞ –î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_name} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
                    )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {e}")
            await self.send_message(
                chat_id=chat_id,
                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return False
    
    def _format_campaign_info(self, campaign: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏–∏.
        
        Args:
            campaign (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏–∏.
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–º–ø–∞–Ω–∏–∏.
        """
        if not campaign:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = (
            f"*–ö–∞–º–ø–∞–Ω–∏—è: {campaign.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}*\n\n"
            f"üìä *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            f"ID: `{campaign.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID')}`\n"
            f"–°—Ç–∞—Ç—É—Å: {campaign.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–¶–µ–ª—å: {campaign.get('objective', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {campaign.get('created_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–ó–∞–ø—É—â–µ–Ω–∞: {campaign.get('start_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        )
        
        if campaign.get('stop_time'):
            info += f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {campaign.get('stop_time')}\n"
        
        # –ë—é–¥–∂–µ—Ç
        info += f"\nüí∞ *–ë—é–¥–∂–µ—Ç:* ${campaign.get('budget', 0):.2f}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        info += "üìà *–ú–µ—Ç—Ä–∏–∫–∏:*\n"
        metrics = campaign.get('metrics', {})
        if metrics:
            info += (
                f"–†–∞—Å—Ö–æ–¥: ${metrics.get('spend', 0):.2f}\n"
                f"–ü–æ–∫–∞–∑—ã: {metrics.get('impressions', 0):,}\n"
                f"–ö–ª–∏–∫–∏: {metrics.get('clicks', 0):,}\n"
                f"CTR: {metrics.get('ctr', 0):.2f}%\n"
                f"CPC: ${metrics.get('cpc', 0):.2f}\n"
                f"–ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {metrics.get('conversions', 0):,}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: ${metrics.get('cost_per_conversion', 0):.2f}\n"
            )
        else:
            info += "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
        
        # –¢–∞—Ä–≥–µ—Ç–∏–Ω–≥
        targeting = campaign.get('targeting', {})
        if targeting:
            info += "\nüéØ *–¢–∞—Ä–≥–µ—Ç–∏–Ω–≥:*\n"
            if targeting.get('geo_locations'):
                countries = targeting.get('geo_locations', {}).get('countries', [])
                cities = targeting.get('geo_locations', {}).get('cities', [])
                if countries:
                    info += f"–°—Ç—Ä–∞–Ω—ã: {', '.join(countries)}\n"
                if cities:
                    city_names = [city.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for city in cities]
                    info += f"–ì–æ—Ä–æ–¥–∞: {', '.join(city_names)}\n"
            
            if targeting.get('age_min') or targeting.get('age_max'):
                age_min = targeting.get('age_min', '–ù–µ —É–∫–∞–∑–∞–Ω')
                age_max = targeting.get('age_max', '–ù–µ —É–∫–∞–∑–∞–Ω')
                info += f"–í–æ–∑—Ä–∞—Å—Ç: {age_min} - {age_max}\n"
            
            if targeting.get('genders'):
                genders = {1: '–ú—É–∂—á–∏–Ω—ã', 2: '–ñ–µ–Ω—â–∏–Ω—ã'}
                gender_list = [genders.get(g, '–î—Ä—É–≥–æ–µ') for g in targeting.get('genders', [])]
                info += f"–ü–æ–ª: {', '.join(gender_list)}\n"
        
        return info
    
    async def send_alerts(self, chat_id: Union[str, int]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫–∞–º–ø–∞–Ω–∏—è–º–∏.
        
        Args:
            chat_id (Union[str, int]): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.
            
        Returns:
            bool: True, –µ—Å–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
            campaigns = get_campaign_data(
                campaign_id=None,
                days=1,
                status='ACTIVE',
                date_preset='yesterday',
                fields=['impressions', 'clicks', 'spend', 'conversions']
            )
            
            if not campaigns:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                await self.send_message(
                    chat_id=chat_id,
                    text=MESSAGE_TEMPLATES.get('alerts.no_campaigns', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.')
                )
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            alerts = []
            
            # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            ctr_threshold = REPORT_SETTINGS.get('ALERT_LOW_CTR', 0.5)
            cpc_threshold = REPORT_SETTINGS.get('ALERT_HIGH_CPC', 2.0)
            budget_threshold = REPORT_SETTINGS.get('ALERT_BUDGET_THRESHOLD', 80)  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
            
            for campaign in campaigns:
                campaign_id = campaign.get('id')
                campaign_name = campaign.get('name')
                metrics = campaign.get('metrics', {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º CTR
                impressions = metrics.get('impressions', 0)
                clicks = metrics.get('clicks', 0)
                ctr = (clicks / impressions * 100) if impressions > 0 else 0
                
                if impressions > 100 and ctr < ctr_threshold:
                    alert = MESSAGE_TEMPLATES.get('alerts.low_ctr', '').format(
                        campaign_name=campaign_name,
                        campaign_id=campaign_id,
                        ctr=ctr
                    )
                    alerts.append(alert)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º CPC
                spend = metrics.get('spend', 0)
                cpc = spend / clicks if clicks > 0 else 0
                
                if clicks > 10 and cpc > cpc_threshold:
                    alert = MESSAGE_TEMPLATES.get('alerts.high_cpc', '').format(
                        campaign_name=campaign_name,
                        campaign_id=campaign_id,
                        cpc=cpc
                    )
                    alerts.append(alert)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç
                budget = campaign.get('budget', 0)
                budget_used_percent = (spend / budget * 100) if budget > 0 else 0
                
                if budget > 0 and budget_used_percent > budget_threshold:
                    alert = MESSAGE_TEMPLATES.get('alerts.budget_limit', '').format(
                        campaign_name=campaign_name,
                        campaign_id=campaign_id,
                        budget_used_percent=budget_used_percent,
                        remaining_budget=budget - spend
                    )
                    alerts.append(alert)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
                conversions = metrics.get('conversions', 0)
                cost_per_conversion = spend / conversions if conversions > 0 else 0
                
                if spend > 50 and conversions == 0:
                    alert = MESSAGE_TEMPLATES.get('alerts.no_conversions', '').format(
                        campaign_name=campaign_name,
                        campaign_id=campaign_id,
                        spend=spend
                    )
                    alerts.append(alert)
                elif conversions > 0 and cost_per_conversion > 50:
                    alert = MESSAGE_TEMPLATES.get('alerts.high_cost_per_conversion', '').format(
                        campaign_name=campaign_name,
                        campaign_id=campaign_id,
                        cost_per_conversion=cost_per_conversion
                    )
                    alerts.append(alert)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if alerts:
                header = MESSAGE_TEMPLATES.get('alerts.header', '')
                alerts_text = header + "\n\n" + "\n\n".join(alerts)
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(alerts)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                return await self.send_message(chat_id=chat_id, text=alerts_text)
            else:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç
                no_alerts_text = MESSAGE_TEMPLATES.get('alerts.no_alerts', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç. –í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.')
                logger.info("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç")
                return await self.send_message(chat_id=chat_id, text=no_alerts_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º: {e}")
            await self.send_message(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return False 