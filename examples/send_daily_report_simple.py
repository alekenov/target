#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Facebook API.
"""

import os
import logging
import asyncio
import traceback
from datetime import datetime, timedelta
from dotenv import load_dotenv

from telegram import Bot

from facebook_ads_toolkit.auth.facebook_auth import FacebookAuth
from facebook_ads_toolkit.reports.report_generator import get_campaigns_list, get_campaign_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_LOG_CHANNEL_ID = os.getenv('TELEGRAM_LOG_CHANNEL_ID')

async def send_message_to_channel(message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª.
    
    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {TELEGRAM_LOG_CHANNEL_ID}")
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(
            chat_id=TELEGRAM_LOG_CHANNEL_ID,
            text=message,
            parse_mode='Markdown'
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        logger.error(traceback.format_exc())
        return False

def get_real_data():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö –∏–∑ Facebook API.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Facebook API")
        auth = FacebookAuth()
        auth.initialize()
        logger.info(f"Facebook API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê–∫–∫–∞—É–Ω—Ç: {auth.get_ad_account_id()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö")
        yesterday = datetime.now() - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
        campaigns = get_campaigns_list(status='ACTIVE')
        
        if not campaigns:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π")
            return None
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(campaigns)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        campaigns_with_metrics = get_campaign_data(
            campaign_id=None,
            days=1,
            status='ACTIVE',
            date_preset='yesterday',
            fields=['impressions', 'clicks', 'spend', 'conversions']
        )
        
        if not campaigns_with_metrics:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π")
            return None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        total_impressions = sum(c.get('metrics', {}).get('impressions', 0) for c in campaigns_with_metrics)
        total_clicks = sum(c.get('metrics', {}).get('clicks', 0) for c in campaigns_with_metrics)
        total_spend = sum(c.get('metrics', {}).get('spend', 0) for c in campaigns_with_metrics)
        total_conversions = sum(c.get('metrics', {}).get('conversions', 0) for c in campaigns_with_metrics)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_ctr = (total_clicks / total_impressions * 100) if total_impressions > 0 else 0
        total_cpc = total_spend / total_clicks if total_clicks > 0 else 0
        total_cost_per_conversion = total_spend / total_conversions if total_conversions > 0 else 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º CTR –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for campaign in campaigns_with_metrics:
            metrics = campaign.get('metrics', {})
            impressions = metrics.get('impressions', 0)
            clicks = metrics.get('clicks', 0)
            campaign['ctr'] = (clicks / impressions * 100) if impressions > 0 else 0
        
        return {
            'campaigns': campaigns_with_metrics,
            'total_impressions': total_impressions,
            'total_clicks': total_clicks,
            'total_spend': total_spend,
            'total_conversions': total_conversions,
            'total_ctr': total_ctr,
            'total_cpc': total_cpc,
            'total_cost_per_conversion': total_cost_per_conversion
        }
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Facebook API: {e}")
        logger.error(traceback.format_exc())
        return None

def format_daily_report(data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
    
    Args:
        data (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞.
    """
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if not data:
        today = datetime.now().strftime('%d.%m.%Y')
        return (
            f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º Facebook*\n"
            f"üìÖ –î–∞—Ç–∞: {today}\n\n"
            f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Facebook API.\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n"
            f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∫–ª–∞–º–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Facebook API\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    
    # –î–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
    today = datetime.now()
    yesterday = today - timedelta(days=1)
    date_range = f"{yesterday.strftime('%d.%m.%Y')} - {today.strftime('%d.%m.%Y')}"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    report = (
        f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º Facebook*\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_range}\n\n"
        f"*–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
        f"üí∞ –†–∞—Å—Ö–æ–¥: {data['total_spend']:.2f} —Ä—É–±.\n"
        f"üëÅ –ü–æ–∫–∞–∑—ã: {data['total_impressions']:,}\n"
        f"üñ± –ö–ª–∏–∫–∏: {data['total_clicks']:,}\n"
        f"üìà CTR: {data['total_ctr']:.2f}%\n"
        f"üíµ CPC: {data['total_cpc']:.2f} —Ä—É–±.\n"
        f"üéØ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {data['total_conversions']:,}\n"
        f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {data['total_cost_per_conversion']:.2f} —Ä—É–±.\n\n"
    )
    
    # –¢–æ–ø –∫–∞–º–ø–∞–Ω–∏–π
    report += "*–¢–æ–ø –∫–∞–º–ø–∞–Ω–∏–π –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*\n"
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ CTR
    sorted_campaigns = sorted(data['campaigns'], key=lambda x: x.get('ctr', 0), reverse=True)
    for i, campaign in enumerate(sorted_campaigns[:3], 1):
        metrics = campaign.get('metrics', {})
        status_emoji = "üü¢" if campaign.get('status') == 'ACTIVE' else "üî¥"
        report += (
            f"{i}. {status_emoji} *{campaign.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}*\n"
            f"   –ü–æ–∫–∞–∑—ã: {metrics.get('impressions', 0):,} | "
            f"–ö–ª–∏–∫–∏: {metrics.get('clicks', 0):,} | "
            f"CTR: {campaign.get('ctr', 0):.2f}%\n"
            f"   –†–∞—Å—Ö–æ–¥: {metrics.get('spend', 0):.2f} —Ä—É–±. | "
            f"–ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {metrics.get('conversions', 0)}\n\n"
        )
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report += "*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
    if data['total_ctr'] < 1.0:
        report += "‚Ä¢ –ù–∏–∑–∫–∏–π CTR. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥.\n"
    if data['total_cpc'] > 50:
        report += "‚Ä¢ –í—ã—Å–æ–∫–∏–π CPC. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥.\n"
    if data['total_cost_per_conversion'] > 500:
        report += "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∏ –±—é–¥–∂–µ—Ç.\n"
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
    if "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" == report.split("*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n")[1]:
        report += "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.\n"
    
    return report

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞.
    """
    logger.info("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_LOG_CHANNEL_ID:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_LOG_CHANNEL_ID")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Facebook API
    data = get_real_data()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = format_daily_report(data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await send_message_to_channel(report)

if __name__ == "__main__":
    asyncio.run(main()) 