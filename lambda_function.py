#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
AWS Lambda —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö Facebook.
–û—Ç—á–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∏ –ø–æ–∫–∞–∑–∞—Ö –ø–æ –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å.
"""

import os
import sys
import logging
from datetime import datetime, timedelta
import json
import boto3
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from facebook_ads_toolkit.auth.facebook_auth import init_facebook_api, get_api, get_ad_account
from facebook_ads_toolkit.reports.ad_data_fetcher import AdDataFetcher
from facebook_business.adobjects.adaccount import AdAccount

def get_daily_ad_report():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∏ –ø–æ–∫–∞–∑–∞—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å.
    
    Returns:
        dict: –û—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    today = datetime.now().strftime('%Y-%m-%d')
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Facebook API
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Facebook API")
    account, api = init_facebook_api()
    if not account or not api:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Facebook API")
        raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Facebook API")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    data_fetcher = AdDataFetcher(account)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
    campaigns_data = data_fetcher.get_campaigns_stats(
        fields=[
            'impressions', 'clicks', 'spend', 'ctr', 'cpc', 'cpp',
            'reach', 'frequency', 'actions', 'action_values'
        ],
        params={
            'time_range': {
                'since': yesterday,
                'until': today
            },
            'time_increment': 1
        }
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = {
        'date': yesterday,
        'campaigns': campaigns_data,
        'total': {
            'impressions': sum(c.get('impressions', 0) for c in campaigns_data),
            'clicks': sum(c.get('clicks', 0) for c in campaigns_data),
            'spend': sum(float(c.get('spend', 0)) for c in campaigns_data),
            'reach': sum(c.get('reach', 0) for c in campaigns_data)
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if report['total']['impressions'] > 0:
        report['total']['ctr'] = (report['total']['clicks'] / report['total']['impressions']) * 100
    else:
        report['total']['ctr'] = 0
        
    if report['total']['clicks'] > 0:
        report['total']['cpc'] = report['total']['spend'] / report['total']['clicks']
    else:
        report['total']['cpc'] = 0
        
    if report['total']['reach'] > 0:
        report['total']['frequency'] = report['total']['impressions'] / report['total']['reach']
    else:
        report['total']['frequency'] = 0
    
    return report

def format_report(report):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
    
    Args:
        report (dict): –û—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    """
    output = f"–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º –∑–∞ {report['date']}\n"
    output += "=" * 80 + "\n"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    output += f"{'ID –∫–∞–º–ø–∞–Ω–∏–∏':<20} {'–ü–æ–∫–∞–∑—ã':<10} {'–ö–ª–∏–∫–∏':<10} {'CTR':<10} {'CPC':<10} {'–†–∞—Å—Ö–æ–¥':<10}\n"
    output += "-" * 80 + "\n"
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
    for campaign in report['campaigns']:
        campaign_id = campaign.get('campaign_id', '–ù/–î')
        impressions = campaign.get('impressions', 0)
        clicks = campaign.get('clicks', 0)
        ctr = campaign.get('ctr', 0)
        cpc = campaign.get('cpc', 0)
        spend = campaign.get('spend', 0)
        
        output += f"{campaign_id:<20} {impressions:<10} {clicks:<10} {ctr:<10.2f} {cpc:<10.2f} {spend:<10.2f}\n"
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    output += "-" * 80 + "\n"
    output += f"{'–ò–¢–û–ì–û':<20} {report['total']['impressions']:<10} {report['total']['clicks']:<10} "
    output += f"{report['total']['ctr']:<10.2f} {report['total']['cpc']:<10.2f} {report['total']['spend']:<10.2f}\n"
    
    return output

def save_report_to_s3(report):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ S3 –±–∞–∫–µ—Ç.
    
    Args:
        report (dict): –û—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è S3 –±–∞–∫–µ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    s3_bucket = os.environ.get('S3_BUCKET_NAME')
    if not s3_bucket:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è S3 –±–∞–∫–µ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    date_str = report['date']
    filename = f"fb_ads_report_{date_str}.json"
    s3_key = f"reports/{filename}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ S3
    try:
        s3 = boto3.client('s3')
        s3.put_object(
            Bucket=s3_bucket,
            Key=s3_key,
            Body=json.dumps(report, indent=2),
            ContentType='application/json'
        )
        logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ S3: s3://{s3_bucket}/{s3_key}")
        return f"s3://{s3_bucket}/{s3_key}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ S3: {str(e)}")
        return None

def format_telegram_report(report):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    
    Args:
        report (dict): –û—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è Telegram
    """
    date_str = report['date']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    message = f"üìä *–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º Facebook –∑–∞ {date_str}*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message += "*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    message += f"üëÅ –ü–æ–∫–∞–∑—ã: {report['total']['impressions']}\n"
    message += f"üëÜ –ö–ª–∏–∫–∏: {report['total']['clicks']}\n"
    message += f"üí∞ –†–∞—Å—Ö–æ–¥: ${report['total']['spend']:.2f}\n"
    message += f"üéØ CTR: {report['total']['ctr']:.2f}%\n"
    message += f"üíµ CPC: ${report['total']['cpc']:.2f}\n"
    message += f"üë• –û—Ö–≤–∞—Ç: {report['total']['reach']}\n"
    message += f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: {report['total']['frequency']:.2f}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
    message += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º:*\n"
    for campaign in report['campaigns']:
        campaign_name = campaign.get('campaign_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        campaign_id = campaign.get('campaign_id', '–ù/–î')
        impressions = campaign.get('impressions', 0)
        clicks = campaign.get('clicks', 0)
        ctr = campaign.get('ctr', 0)
        spend = campaign.get('spend', 0)
        
        message += f"*{campaign_name}* (ID: {campaign_id})\n"
        message += f"üëÅ –ü–æ–∫–∞–∑—ã: {impressions}\n"
        message += f"üëÜ –ö–ª–∏–∫–∏: {clicks}\n"
        message += f"üí∞ –†–∞—Å—Ö–æ–¥: ${float(spend):.2f}\n"
        message += f"üéØ CTR: {ctr:.2f}%\n\n"
    
    return message

def send_telegram_message(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    
    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞ Telegram –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
    
    try:
        response = requests.post(url, data=data)
        if response.status_code == 200:
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {response.text}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        return False

def lambda_handler(event, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AWS Lambda.
    
    Args:
        event (dict): –°–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏—é
        context (object): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        report = get_daily_ad_report()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        formatted_report = format_report(report)
        logger.info(formatted_report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ S3
        report_file = save_report_to_s3(report)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è Telegram
        telegram_report = format_telegram_report(report)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
        sent = send_telegram_message(telegram_report)
        if sent:
            logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram")
        
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'report_file': report_file
            })
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Lambda —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        
        return {
            'statusCode': 500,
            'body': json.dumps({
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
        } 